                                                                      Grand Test-3
This is Grand Test-3 which consists of 5 coding challenges. You are required to attempt any 3 questions out of the 5. Each question carries 30 marks. If you attempt the 4th question, you will receive an additional bonus of 10 points.
Duration:  3 hours
Challenge 1:
You are building a payroll system for a company that has two types of employees: salaried employees and hourly employees. The payroll system needs to calculate the monthly salary for each employee based on their specific type and hours worked. Additionally, the system should demonstrate polymorphism by calculating the monthly salary for different types of employees.
Sample Input:
For Salary Base Employee
Enter Employee Name: John Doe
Enter Employee Id : 1001, 
Enter Employee Salary: 5000.0

For hourly Based Employee
Enter Employee Name: Jane Smith
Enter Employee Id : 1002
Enter Employee Salary: 5000.0
Enter Hourly Rate:  200.0
Enter hoursWorked : 150.0
Sample Output:
Employee Name: John Doe
Employee ID: 1001
Monthly Salary:  5000.0
Employee Name: Jane Smith
Employee ID: 1002
Monthly  Salary: 30000.0
Challenge 2:
Scenario: Online Shopping Platform Product Data Input
You are a software developer working for an online shopping platform. The platform allows customers to purchase a wide variety of products. Your task is to develop a program that allows the platform administrators to input product data dynamically and validate the inputs according to specific requirements. The program should also display the data for all the products entered.
As per the requirements, each product should have the following attributes: productId, productName, price, category, and quantityInStock. The program should enforce the following validations:
1.	productId: A unique 4-digit number.
2.	productName: A name between 2 and 50 characters in length.
3.	price: A positive value (in dollars).
4.	category: The category or type of the product.
5.	quantityInStock: A positive integer indicating the quantity of the product available in stock.
Your task is to implement a Java program that fulfills these requirements. The program should allow the user to input data for five products dynamically. Each product's data should be validated according to the mentioned rules. After inputting the data for all five products, the program should display the entered product data for verification.
In addition, you are required to add a custom exception for the price attribute. If the price entered for a product is not a positive value, an InvalidPriceException should be thrown with an appropriate error message.
Write the Java program that implements the above requirements, including input validation and displaying the product data.

Example Input and Output:
Sample Input:
Enter data for product 1:
Product ID: P001
Product Name: Laptop
Price: 1500.0
Category: Electronics
Quantity in Stock: 10

Enter data for product 2:
Product ID: P002
Product Name: T-Shirt
Price: -34.4
Category: Clothing
Quantity in Stock: 50

Output:
Product ID: P001
Product Name: Laptop
Price: 1500.0
Category: Electronics
Quantity in Stock: 10

Product ID: P002
Product Name: T-Shirt
InvalidPriceException : Invalid price format, please enter a positive value
Category: Clothing
Quantity in Stock: 50

Challenge 3:
Scenario:
You are building a student management system for a school that allows teachers to manage student information. The system should be able to add new students, display student details, calculate average marks, and handle exceptions for invalid inputs. Your task is to create a Java program that implements the necessary classes and methods to achieve these functionalities.
Instructions:
Create a class called "Student" with the following instance variables:
studentId 
name 
marks 
The "Student" class should have the following methods:
A constructor that takes the student ID, name, marks, and total number of subjects as parameters and initializes the instance variables.
Add a method that displays the student's ID, name, and marks for each subject.
Add a method to calculates and returns the average marks of the student.
Custom exception handling for invalid inputs:
Create a custom exception class called "InvalidMarkException" that extends the Exception class. This exception should be thrown when a mark is less than 0 or greater than 100.
In the main method of the program, create multiple Student objects with different student IDs, names, marks, and total subjects. Demonstrate the functionality of the Student class by calling the necessary methods to display student details and calculate average marks. Handle any possible exceptions that may occur.

Sample Output:
Welcome to the Student Management System!
Student Details:
Student ID: S001
Name: John Doe
Marks:
Subject 1: 85
Subject 2: 90
Subject 3: 92
Subject 4: 78
Subject 5: 87
Average Marks: 86.4

Student Details:
Student ID: S001
Name: John Doe
Marks:
Subject 1: 85
Subject 2: 90
Subject 3: 92
Subject 4: 78
Subject 5: -5
Exception: InvalidMarkException - Invalid mark entered: -5

Challege 4:
Scenario:
You are tasked with developing a contact management system for a personal organizer application. The system should allow users to create, read, update, and delete contacts. As a software developer, your task is to create a program that can perform these operations using object-oriented programming concepts, interface implementation, and exception handling.
Task:
Write a Java program that implements a contact management system using classes and interfaces. The classes should include Contact, PersonalContact, and ContactManager. The interface should include CRUD operations.
The Contact class should have the following instance variables:
contactId: The unique identifier of the contact.
name: The name of the contact.
email : The email address of the contact.
phoneNumber :The phone number of the contact.
The PersonalContact class should inherit from the Contact class and add additional instance variables specific to personal contacts, such as address 
Input:
create
Enter Contact ID: 1
Enter Name: John
Enter Email: john@example.com
Enter Phone Number: 1234567890
create
Enter Contact ID: 2
Enter Name: Jane
Enter Email: jane@example.com
Enter Phone Number: 9876543210
Enter Address (if applicable): Personal 123 Main St
read
Enter Contact ID: 1
update
Enter Contact ID: 2
Enter New Name: JaneUpdated
Enter New Email: jane.updated@example.com
Enter New Phone Number: 9999999999
delete
Enter Contact ID: 1
read
Enter Contact ID: 1
 
Output:
Contact created successfully.
Contact created successfully.
Contact Details:
Contact ID: 1
Name: John
Email: john@example.com
Phone Number: 1234567890
Contact updated successfully.
Contact deleted successfully.
Contact not found.
Challenge 5:
You are working on a project that involves analyzing an array of integers. The task is to count the number of elements in the array that have specific properties, such as being divisible by a given number, having a digit sum greater than a certain value, being a perfect number, or having a repeating digit. You decide to create a program to automate this counting process.
Task: Write a Java program to count the number of elements in an array that have specific properties. The program should prompt the user to enter the size of the array and then input the elements of the array dynamically. After inputting the array elements, the program should count the number of elements that have each specific property and display the results.
 Input:
Welcome to the Array Analysis Program!
Enter the size of the array: 6
Enter element 1: 25
Enter element 2: 12
Enter element 3: 49
Enter element 4: 28
Enter element 5: 136
Enter element 6: 333

Enter the number by which the elements should be divisible: 5
Enter the digit sum threshold: 10

Output:
Number of elements divisible by 5: 1
Number of elements with digit sum greater than 10: 2
Number of perfect Number elements: 1
Number of elements with repeating digits: 1
